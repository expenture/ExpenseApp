#!/usr/bin/env node
/**
 * render-template - Render a mustache template using application configuration
 * and constants.
 *
 * Usage: render-template source-file
 *
 * The output file will be automatically determined by removing the "template"
 * (or "templates") keyword in the source file path, for instance:
 * app/templates/info.xml -> app/info.xml
 * app/config.template.xml -> app/config.xml
 *
 * Requirements: mustache (npm install mustache)
 */

var Mustache = require('mustache');
var child_process = require('child_process');
var fs = require('fs');

function execSync(command) {
  // Run the command in a subshell
  child_process.exec(command + ' 2>&1 1> nodejs_execSync_output && echo done! > nodejs_execSync_done');

  // Block the event loop until the command has executed.
  while (!fs.existsSync('nodejs_execSync_done')) {
    // Do nothing
  }

  // Read the output
  var output = fs.readFileSync('nodejs_execSync_output', 'utf8');

  // Delete temporary files.
  fs.unlinkSync('nodejs_execSync_output');
  fs.unlinkSync('nodejs_execSync_done');

  return output.replace(/\n$/, '');
}

// Build variables
var variables = {};

// load app info from package.json
variables.app = require('../package.json');
variables.app.versionName = variables.app.version;
variables.app.versionCode = variables.app.version.split('.').map((v) => parseInt(v)).reduce((vc, v, i) => (vc + v * Math.pow(10000, 2-i)), 0);

// load configurations from config.js
try {
  variables.config = require('../config.js');
} catch (e) {}

// load app constants from app/constants/*
try {
  fs.readdirSync(__dirname + '/../app/constants').forEach(function(file) {
    variables[file.replace(/\.js$/, '')] = require('../app/constants/' + file);
  });
} catch (e) {}

// load build info
variables.build = {};
variables.build.commit = execSync('git rev-parse HEAD');
variables.build.hostname = execSync('hostname');
variables.build.user = execSync('echo "$USER"');
variables.build.timeStamp = (new Date()).toISOString();

// Do the render
var templateFilePath = process.argv[2];

if (!templateFilePath) {
  console.error('Error: Missing template path as the first arg.');
  return -1;
}

var outputFilePath = templateFilePath.replace(/[\._\-]?templates?[\/]?/, '');

if (outputFilePath == templateFilePath) {
  console.error('Error: The template file path ' + templateFilePath + ' does not contains "template", so we can\'t determine where to place the output file. Please rename the template file or place the template file in a directory named "template".');
  return -1;
}

var templateFile = fs.readFileSync(templateFilePath, "utf8");

var outputFile = Mustache.render(templateFile, variables);

if (outputFilePath.match(/.xml$/) || outputFilePath.match(/.plist$/)) {
  outputFile = "<!-- This file is rendered from " + templateFilePath + " -->\n" +
               "<!-- !!! DO NOT EDIT THIS FILE DIRECTLY. !!! -->\n" +
               "<!-- You should edit " + templateFilePath + " and then run bin/render-templates from the project directory. -->\n\n" +
               outputFile +
               "\n" +
               "<!-- !!! DO NOT EDIT THIS FILE DIRECTLY. !!! -->\n" +
               "<!-- This file is rendered from " + templateFilePath + " -->\n" +
               "<!-- You should edit " + templateFilePath + " and then run bin/render-templates from the project directory. -->\n";
} else if (outputFilePath.match(/.gradle$/)) {
  outputFile = "/**\n * This file is rendered from " + templateFilePath + "\n" +
               " *\n" +
               " * !!! DO NOT EDIT THIS FILE DIRECTLY. !!!\n" +
               " *\n" +
               " * You should edit " + templateFilePath + "\n" +
               " * and then run bin/render-templates from the project directory.\n" +
               " */\n\n" +
               outputFile +
               "\n" +
               "// !!! DO NOT EDIT THIS FILE DIRECTLY. !!!\n" +
               "// This file is rendered from " + templateFilePath + "\n" +
               "// You should edit " + templateFilePath + "\n" +
               "// and then run bin/render-templates from the project directory.\n";
}

var outputFileDir = outputFilePath.replace(/\/[^\/]+$/, '');

if (!(outputFileDir === outputFilePath)) {
  execSync('mkdir -p ' + outputFilePath.replace(/\/[^\/]+$/, '') + '; echo mkdired');
}

fs.writeFileSync(outputFilePath, outputFile);

console.log("Rendered: ", templateFilePath);
